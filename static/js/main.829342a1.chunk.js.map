{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["deltaE","rgbA","rgbB","labA","rgb2lab","labB","deltaL","deltaA","deltaB","c1","Math","sqrt","deltaC","deltaH","deltaLKlsl","deltaCkcsc","deltaHkhsh","i","rgb","x","y","z","r","g","b","pow","rcv","floor","random","computeDistance","colors","distance","colorIndices","length","color","j","delta","push","computeGradient","c","color1","color2","d1","d2","delta1","delta2","colorToString","round","toString","randomColors","n","App","props","opposite","parseInt","slice","updateColors","setTimeout","console","log","colorStrings","iterations","background","finalDistance","colorIndex","gradient","pop","newColors","map","findNColors","state","backgroundColor","setState","contrast","computing","classes","this","className","heroContent","Container","maxWidth","Typography","component","variant","align","gutterBottom","paragraph","Grid","container","root","spacing","item","xs","justify","Paper","style","marginLeft","marginRight","padding","index","key","height","marginBottom","textAlign","direction","type","name","defaultValue","onChange","event","target","value","TextField","id","width","numColors","alert","Array","apply","Button","onClick","React","Component","withStyles","marginTop","footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAaA,SAASA,EAAOC,EAAMC,GACpB,IAAIC,EAAOC,EAAQH,GACfI,EAAOD,EAAQF,GACfI,EAASH,EAAK,GAAKE,EAAK,GACxBE,EAASJ,EAAK,GAAKE,EAAK,GACxBG,EAASL,EAAK,GAAKE,EAAK,GACxBI,EAAKC,KAAKC,KAAKR,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAElDS,EAASH,EADJC,KAAKC,KAAKN,EAAK,GAAKA,EAAK,GAAKA,EAAK,GAAKA,EAAK,IAElDQ,EAASN,EAASA,EAASC,EAASA,EAASI,EAASA,EAItDE,EAAaR,EAAS,EACtBS,EAAaH,GAHR,EAAM,KAAQH,GAInBO,GALJH,EAASA,EAAS,EAAI,EAAIH,KAAKC,KAAKE,KAE3B,EAAM,KAAQJ,GAInBQ,EACFH,EAAaA,EAAaC,EAAaA,EAAaC,EAAaA,EACnE,OAAOC,EAAI,EAAI,EAAIP,KAAKC,KAAKM,GAG/B,SAASb,EAAQc,GACf,IAGEC,EACAC,EACAC,EALEC,EAAIJ,EAAI,GAAK,IACfK,EAAIL,EAAI,GAAK,IACbM,EAAIN,EAAI,GAAK,IAaf,OALAE,GAAS,OAJTE,EAAIA,EAAI,OAAUZ,KAAKe,KAAKH,EAAI,MAAS,MAAO,KAAOA,EAAI,OAIrC,OAHtBC,EAAIA,EAAI,OAAUb,KAAKe,KAAKF,EAAI,MAAS,MAAO,KAAOA,EAAI,OAGxB,OAFnCC,EAAIA,EAAI,OAAUd,KAAKe,KAAKD,EAAI,MAAS,MAAO,KAAOA,EAAI,QAEd,EAC7CH,GAAS,MAAJC,EAAiB,MAAJC,EAAiB,MAAJC,GAAc,QAC7CL,GAHAA,GAAS,MAAJG,EAAiB,MAAJC,EAAiB,MAAJC,GAAc,QAGrC,QAAWd,KAAKe,IAAIN,EAAG,EAAI,GAAK,MAAQA,EAAI,GAAK,IAGlD,CAAC,KAFRC,EAAIA,EAAI,QAAWV,KAAKe,IAAIL,EAAG,EAAI,GAAK,MAAQA,EAAI,GAAK,KAEvC,GAAI,KAAOD,EAAIC,GAAI,KAAOA,GAD5CC,EAAIA,EAAI,QAAWX,KAAKe,IAAIJ,EAAG,EAAI,GAAK,MAAQA,EAAI,GAAK,OAI3D,SAASK,IACP,OAAOhB,KAAKiB,MAAsB,IAAhBjB,KAAKkB,UAGzB,SAASC,EAAgBC,GAGvB,IAFA,IAAIC,EAAW,IACXC,EAAe,GACVf,EAAI,EAAGA,EAAIa,EAAOG,OAAQhB,IAEjC,IADA,IAAIiB,EAAQJ,EAAOb,GACVkB,EAAI,EAAGA,EAAIL,EAAOG,OAAQE,IACjC,GAAIA,IAAMlB,EAAV,CAGA,IAAImB,EAAQpC,EAAOkC,EAAOJ,EAAOK,IAC7BC,EAAQL,IACVA,EAAWK,EACXJ,EAAe,GACXf,EAAI,IAAMa,EAAOG,QACnBD,EAAaK,KAAKpB,GAEhBkB,EAAI,IAAML,EAAOG,QACnBD,EAAaK,KAAKF,IAK1B,MAAO,CAAEJ,WAAUC,gBAGrB,SAASM,EAAgBR,EAAQb,GAG/B,IAFA,IACIM,EAAI,CAAC,EAAG,EAAG,GACNgB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIC,EAAS,CAACV,EAAOb,GAAG,GAAIa,EAAOb,GAAG,GAAIa,EAAOb,GAAG,IAChDwB,EAAS,CAACX,EAAOb,GAAG,GAAIa,EAAOb,GAAG,GAAIa,EAAOb,GAAG,IAChDuB,EAAOD,GALG,MAKa,IACzBC,EAAOD,IANK,KAQZE,EAAOF,IARK,KAYd,IAFA,IAAIG,EAAK,IACLC,EAAK,IACAR,EAAI,EAAGA,EAAIL,EAAOG,OAAQE,IACjC,GAAIA,IAAMlB,EAAV,CAGA,IAAI2B,EAAS5C,EAAOwC,EAAQV,EAAOK,IAC/BU,EAAS7C,EAAOyC,EAAQX,EAAOK,IAC/BS,EAASF,IACXA,EAAKE,GAEHC,EAASF,IACXA,EAAKE,GAGTtB,EAAEgB,KAAOI,EAAKD,GAzBA,KA2BhB,OAAOnB,EAGT,SAASuB,EAAcZ,GACrB,IAAIZ,EAAIZ,KAAKqC,MAAMb,EAAM,IAAIc,SAAS,IAClC1B,EAAEW,OAAS,IACbX,EAAI,IAAMA,GAEZ,IAAIC,EAAIb,KAAKqC,MAAMb,EAAM,IAAIc,SAAS,IAClCzB,EAAEU,OAAS,IACbV,EAAI,IAAMA,GAEZ,IAAIC,EAAId,KAAKqC,MAAMb,EAAM,IAAIc,SAAS,IAItC,OAHIxB,EAAES,OAAS,IACbT,EAAI,IAAMA,GAEN,IAAN,OAAWF,GAAX,OAAeC,GAAf,OAAmBC,GA2CrB,SAASyB,EAAaC,GAEpB,IADA,IAAIpB,EAAS,GACJb,EAAI,EAAGA,EAAIiC,EAAGjC,IACrBa,EAAOO,KAAP,WACMX,IAAMsB,SAAS,KADrB,OAC2BtB,IAAMsB,SAAS,KAD1C,OACgDtB,IAAMsB,SAAS,MAGjE,OAAOlB,E,IAGHqB,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KASRC,SAAW,SAAAnB,GAIT,OAHQoB,SAASpB,EAAMqB,MAAM,EAAG,IACxBD,SAASpB,EAAMqB,MAAM,EAAG,IACxBD,SAASpB,EAAMqB,MAAM,EAAG,IAChB,IACP,UAEA,WAjBQ,EAqBnBC,aAAe,WACbC,YAAW,WACTC,QAAQC,IAAI,SADG,MAzErB,SAAqBC,EAAcC,EAAYC,GAI7C,IAHA,IACIZ,EAAIU,EAAa3B,OACjBH,EAAS,GACJb,EAAI,EAAGA,EAAIiC,EAAGjC,IACrBa,EAAOO,KAAK,CACViB,SAASM,EAAa3C,GAAGsC,MAAM,EAAG,GAAI,IACtCD,SAASM,EAAa3C,GAAGsC,MAAM,EAAG,GAAI,IACtCD,SAASM,EAAa3C,GAAGsC,MAAM,EAAG,GAAI,MAG1CzB,EAAOO,KAAK,CACViB,SAASQ,EAAWP,MAAM,EAAG,GAAI,IACjCD,SAASQ,EAAWP,MAAM,EAAG,GAAI,IACjCD,SAASQ,EAAWP,MAAM,EAAG,GAAI,MAGnC,IADA,IAAIQ,EAAgB,EACX9C,EAAI,EAAGA,EAAI4C,EAAY5C,IAAK,CAAC,IAAD,EACFY,EAAgBC,GAA3CC,EAD6B,EAC7BA,SAAUC,EADmB,EACnBA,aAChB+B,EAAgBhC,EAIhB,IAHA,IAAIiC,EACFhC,EAAatB,KAAKiB,MAAMjB,KAAKkB,SAAWI,EAAaC,SACnDgC,EAAW3B,EAAgBR,EAAQkC,GAC9BzB,EAAI,EAAGA,EAAI,EAAGA,IACrBT,EAAOkC,GAAYzB,IAvBJ,GAuByB0B,EAAS1B,GAC7CT,EAAOkC,GAAYzB,GAAK,IAC1BT,EAAOkC,GAAYzB,GAAK,GAEtBT,EAAOkC,GAAYzB,GAAK,MAC1BT,EAAOkC,GAAYzB,GAAK,KAK9B,OADAT,EAAOoC,MACA,CACLC,UAAWrC,EAAOsC,IAAItB,GACtBf,SAAUgC,GAuCwBM,CAC9B,EAAKC,MAAMxC,OACX,IACA,EAAKwC,MAAMC,iBAHLJ,EAFO,EAEPA,UAAWpC,EAFJ,EAEIA,SAKnB,EAAKyC,SAAS,CAAE1C,OAAQqC,EAAWM,SAAU1C,IACzC,EAAKuC,MAAMI,WACb,EAAKlB,eAEPE,QAAQC,IAAI,UACX,IAhCH,EAAKW,MAAQ,CACXxC,OAAQ,CAAC,UAAW,UAAW,WAC/ByC,gBAAiB,UACjBG,WAAW,EACXD,SAAU,GANK,E,sEAqCT,IAAD,OACCE,EAAYC,KAAKxB,MAAjBuB,QACR,OACE,yBAAKE,UAAWF,EAAQG,aACtB,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CACEC,UAAU,KACVC,QAAQ,KACRC,MAAM,SACNlD,MAAM,cACNmD,cAAY,GALd,6BASA,kBAACJ,EAAA,EAAD,CACEE,QAAQ,KACRC,MAAM,SACNlD,MAAM,gBACNoD,WAAS,GAJX,yUAaF,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACX,UAAWF,EAAQc,KAAMC,QAAS,GAChD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,IACb,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,QAAQ,UACtB,kBAACN,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CACEC,MAAO,CACLxB,gBAAiBK,KAAKN,MAAMC,gBAC5ByB,WAAY,OACZC,YAAa,OACbC,QAAS,SAGX,kBAACjB,EAAA,EAAD,CACEE,QAAQ,KACRC,MAAM,SACNlD,MAAM,cACNmD,cAAY,GAJd,mBAQCT,KAAKN,MAAMxC,OAAOsC,KAAI,SAAClC,EAAOiE,GAAR,OACrB,yBACEC,IAAKD,EACLJ,MAAO,CACLxB,gBAAiBrC,EACjBmE,OAAQ,OACRC,aAAc,OACdC,UAAW,SACXrE,MAAO,EAAKmB,SAASnB,KAGtBA,QAKT,kBAACqD,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CACEC,MAAO,CACLG,QAAS,OACTF,WAAY,OACZC,YAAa,SAGf,kBAAChB,EAAA,EAAD,CACEE,QAAQ,KACRC,MAAM,SACNlD,MAAM,cACNmD,cAAY,GAJd,iBAQA,kBAACE,EAAA,EAAD,CAAMC,WAAS,EAACgB,UAAU,SAASd,QAAS,GAC1C,kBAACH,EAAA,EAAD,CACEC,WAAS,EACTG,MAAI,EACJa,UAAU,MACVX,QAAQ,iBAER,kBAACZ,EAAA,EAAD,CACEE,QAAQ,KACRC,MAAM,OACNlD,MAAM,iBAHR,4BAOA,2BACEuE,KAAK,QACLC,KAAK,WACLC,aAAa,UACbC,SAAU,SAAAC,GAAK,OACb,EAAKrC,SAAS,CAAED,gBAAiBsC,EAAMC,OAAOC,YAIpD,kBAACxB,EAAA,EAAD,CACEC,WAAS,EACTG,MAAI,EACJa,UAAU,MACVX,QAAQ,iBAER,kBAACZ,EAAA,EAAD,CACEE,QAAQ,KACRC,MAAM,OACNlD,MAAM,iBAHR,qBAOA,kBAAC8E,EAAA,EAAD,CACEC,GAAG,iBACHR,KAAK,SACLE,aAAc,EACdZ,MAAO,CAAEmB,MAAO,QAChBN,SAAU,SAAAC,GACR,IAAIM,EAAY7D,SAASuD,EAAMC,OAAOC,OAClCI,EAAY,IACdA,EAAY,EACZC,MAAM,6BAER,EAAK5C,SAAS,CACZ1C,OAAQuF,MAAMC,MAAM,KAAMD,MAAMF,IAAY/C,KAC1C,4BACM1C,IAAMsB,SAAS,KADrB,OAC2BtB,IAAMsB,SAC7B,KAFJ,OAGMtB,IAAMsB,SAAS,cAM/B,kBAACuC,EAAA,EAAD,CAAMC,WAAS,EAACG,MAAI,EAACa,UAAU,MAAMX,QAAQ,gBAC3C,kBAAC0B,EAAA,EAAD,CACErF,MAAM,YACNsF,QAAS,kBAAM,EAAKhD,SAAS,CAAEE,WAAW,MAF5C,QAMA,kBAAC6C,EAAA,EAAD,CACErF,MAAM,UACNsF,QAAS,WACH,EAAKlD,MAAMI,UACb,EAAKF,SAAS,CACZ1C,OAAQmB,EAAa,EAAKqB,MAAMxC,OAAOG,WAGzC,EAAKuC,SAAS,CAAEE,WAAW,IAC3B,EAAKlB,mBAIPoB,KAAKN,MAAMI,WAAa,QACzBE,KAAKN,MAAMI,WAAa,UAG5BE,KAAKN,MAAMI,WACV,kBAACa,EAAA,EAAD,CACEC,WAAS,EACTG,MAAI,EACJa,UAAU,MACVX,QAAQ,gBAER,kBAACZ,EAAA,EAAD,CACEE,QAAQ,KACRC,MAAM,OACNlD,MAAM,iBAHR,aAKa0C,KAAKN,MAAMG,sB,GAnN9BgD,IAAMC,WAiOTC,cA9YA,CACb7C,YAAa,CACX8C,UAAW,QAEbC,OAAQ,IA0YKF,CAAmBxE,GCxYd2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.829342a1.chunk.js","sourcesContent":["import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport { Paper, Grid, TextField, Button } from \"@material-ui/core\";\n\nconst styles = {\n  heroContent: {\n    marginTop: \"50px\"\n  },\n  footer: {}\n};\n\nfunction deltaE(rgbA, rgbB) {\n  let labA = rgb2lab(rgbA);\n  let labB = rgb2lab(rgbB);\n  let deltaL = labA[0] - labB[0];\n  let deltaA = labA[1] - labB[1];\n  let deltaB = labA[2] - labB[2];\n  let c1 = Math.sqrt(labA[1] * labA[1] + labA[2] * labA[2]);\n  let c2 = Math.sqrt(labB[1] * labB[1] + labB[2] * labB[2]);\n  let deltaC = c1 - c2;\n  let deltaH = deltaA * deltaA + deltaB * deltaB - deltaC * deltaC;\n  deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n  let sc = 1.0 + 0.045 * c1;\n  let sh = 1.0 + 0.015 * c1;\n  let deltaLKlsl = deltaL / 1.0;\n  let deltaCkcsc = deltaC / sc;\n  let deltaHkhsh = deltaH / sh;\n  let i =\n    deltaLKlsl * deltaLKlsl + deltaCkcsc * deltaCkcsc + deltaHkhsh * deltaHkhsh;\n  return i < 0 ? 0 : Math.sqrt(i);\n}\n\nfunction rgb2lab(rgb) {\n  let r = rgb[0] / 255,\n    g = rgb[1] / 255,\n    b = rgb[2] / 255,\n    x,\n    y,\n    z;\n  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;\n  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;\n  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;\n  x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.95047;\n  y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.0;\n  z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.08883;\n  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;\n  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;\n  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;\n  return [116 * y - 16, 500 * (x - y), 200 * (y - z)];\n}\n\nfunction rcv() {\n  return Math.floor(Math.random() * 256);\n}\n\nfunction computeDistance(colors) {\n  let distance = 100;\n  let colorIndices = [];\n  for (let i = 0; i < colors.length; i++) {\n    let color = colors[i];\n    for (let j = 0; j < colors.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      let delta = deltaE(color, colors[j]);\n      if (delta < distance) {\n        distance = delta;\n        colorIndices = [];\n        if (i + 1 !== colors.length) {\n          colorIndices.push(i);\n        }\n        if (j + 1 !== colors.length) {\n          colorIndices.push(j);\n        }\n      }\n    }\n  }\n  return { distance, colorIndices };\n}\n\nfunction computeGradient(colors, i) {\n  const epsilon = 0.00001;\n  let g = [0, 0, 0];\n  for (let c = 0; c < 3; c++) {\n    let color1 = [colors[i][0], colors[i][1], colors[i][2]];\n    let color2 = [colors[i][0], colors[i][1], colors[i][2]];\n    if (color1[c] + epsilon >= 255) {\n      color1[c] -= epsilon;\n    } else {\n      color2[c] += epsilon;\n    }\n    let d1 = 100;\n    let d2 = 100;\n    for (let j = 0; j < colors.length; j++) {\n      if (j === i) {\n        continue;\n      }\n      let delta1 = deltaE(color1, colors[j]);\n      let delta2 = deltaE(color2, colors[j]);\n      if (delta1 < d1) {\n        d1 = delta1;\n      }\n      if (delta2 < d2) {\n        d2 = delta2;\n      }\n    }\n    g[c] += (d2 - d1) / epsilon;\n  }\n  return g;\n}\n\nfunction colorToString(color) {\n  let r = Math.round(color[0]).toString(16);\n  if (r.length < 2) {\n    r = \"0\" + r;\n  }\n  let g = Math.round(color[1]).toString(16);\n  if (g.length < 2) {\n    g = \"0\" + g;\n  }\n  let b = Math.round(color[2]).toString(16);\n  if (b.length < 2) {\n    b = \"0\" + b;\n  }\n  return `#${r}${g}${b}`;\n}\n\nfunction findNColors(colorStrings, iterations, background) {\n  let learningRate = 0.1;\n  let n = colorStrings.length;\n  let colors = [];\n  for (let i = 0; i < n; i++) {\n    colors.push([\n      parseInt(colorStrings[i].slice(1, 3), 16),\n      parseInt(colorStrings[i].slice(3, 5), 16),\n      parseInt(colorStrings[i].slice(5, 7), 16)\n    ]);\n  }\n  colors.push([\n    parseInt(background.slice(1, 3), 16),\n    parseInt(background.slice(3, 5), 16),\n    parseInt(background.slice(5, 7), 16)\n  ]);\n  let finalDistance = 0;\n  for (let i = 0; i < iterations; i++) {\n    let { distance, colorIndices } = computeDistance(colors);\n    finalDistance = distance;\n    let colorIndex =\n      colorIndices[Math.floor(Math.random() * colorIndices.length)];\n    let gradient = computeGradient(colors, colorIndex);\n    for (let c = 0; c < 3; c++) {\n      colors[colorIndex][c] += learningRate * gradient[c];\n      if (colors[colorIndex][c] < 0) {\n        colors[colorIndex][c] = 0;\n      }\n      if (colors[colorIndex][c] > 255) {\n        colors[colorIndex][c] = 255;\n      }\n    }\n  }\n  colors.pop();\n  return {\n    newColors: colors.map(colorToString),\n    distance: finalDistance\n  };\n}\n\nfunction randomColors(n) {\n  let colors = [];\n  for (let i = 0; i < n; i++) {\n    colors.push(\n      `#${rcv().toString(16)}${rcv().toString(16)}${rcv().toString(16)}`\n    );\n  }\n  return colors;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [\"#ea1d13\", \"#000000\", \"#6e5dff\"],\n      backgroundColor: \"#ffffff\",\n      computing: false,\n      contrast: 0\n    };\n  }\n\n  opposite = color => {\n    let r = parseInt(color.slice(1, 3));\n    let g = parseInt(color.slice(3, 5));\n    let b = parseInt(color.slice(5, 7));\n    if (r + g + b > 256 * 1.5) {\n      return \"#000000\";\n    } else {\n      return \"#ffffff\";\n    }\n  };\n\n  updateColors = () => {\n    setTimeout(() => {\n      console.log(\"start\");\n      const { newColors, distance } = findNColors(\n        this.state.colors,\n        10000,\n        this.state.backgroundColor\n      );\n      this.setState({ colors: newColors, contrast: distance });\n      if (this.state.computing) {\n        this.updateColors();\n      }\n      console.log(\"done\");\n    }, 1);\n  };\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div className={classes.heroContent}>\n        <Container maxWidth=\"md\">\n          <Typography\n            component=\"h1\"\n            variant=\"h2\"\n            align=\"center\"\n            color=\"textPrimary\"\n            gutterBottom\n          >\n            Contrastive Color Chooser\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            align=\"center\"\n            color=\"textSecondary\"\n            paragraph\n          >\n            Use this tool to select the most contrastive colors to human\n            perception. Press start and an algorithm will begin running to\n            slowly find more and more contrastive colors. The longer you let it\n            run, the better the result may be. It is possible the algorithm will\n            get stuck, in which case, you may want to hit the reset button.\n          </Typography>\n        </Container>\n        <Grid container className={classes.root} spacing={2}>\n          <Grid item xs={12}>\n            <Grid container justify=\"center\">\n              <Grid item xs={6}>\n                <Paper\n                  style={{\n                    backgroundColor: this.state.backgroundColor,\n                    marginLeft: \"20px\",\n                    marginRight: \"20px\",\n                    padding: \"20px\"\n                  }}\n                >\n                  <Typography\n                    variant=\"h3\"\n                    align=\"center\"\n                    color=\"textPrimary\"\n                    gutterBottom\n                  >\n                    Computed Colors\n                  </Typography>\n                  {this.state.colors.map((color, index) => (\n                    <div\n                      key={index}\n                      style={{\n                        backgroundColor: color,\n                        height: \"50px\",\n                        marginBottom: \"20px\",\n                        textAlign: \"center\",\n                        color: this.opposite(color)\n                      }}\n                    >\n                      {color}\n                    </div>\n                  ))}\n                </Paper>\n              </Grid>\n              <Grid item xs={6}>\n                <Paper\n                  style={{\n                    padding: \"20px\",\n                    marginLeft: \"20px\",\n                    marginRight: \"20px\"\n                  }}\n                >\n                  <Typography\n                    variant=\"h3\"\n                    align=\"center\"\n                    color=\"textPrimary\"\n                    gutterBottom\n                  >\n                    Configuration\n                  </Typography>\n                  <Grid container direction=\"column\" spacing={2}>\n                    <Grid\n                      container\n                      item\n                      direction=\"row\"\n                      justify=\"space-between\"\n                    >\n                      <Typography\n                        variant=\"h5\"\n                        align=\"left\"\n                        color=\"textSecondary\"\n                      >\n                        Select background color:\n                      </Typography>\n                      <input\n                        type=\"color\"\n                        name=\"favcolor\"\n                        defaultValue=\"#F0F0F0\"\n                        onChange={event =>\n                          this.setState({ backgroundColor: event.target.value })\n                        }\n                      />\n                    </Grid>\n                    <Grid\n                      container\n                      item\n                      direction=\"row\"\n                      justify=\"space-between\"\n                    >\n                      <Typography\n                        variant=\"h5\"\n                        align=\"left\"\n                        color=\"textSecondary\"\n                      >\n                        Number of colors:\n                      </Typography>\n                      <TextField\n                        id=\"standard-basic\"\n                        type=\"number\"\n                        defaultValue={3}\n                        style={{ width: \"60px\" }}\n                        onChange={event => {\n                          let numColors = parseInt(event.target.value);\n                          if (numColors < 1) {\n                            numColors = 1;\n                            alert(\"Invalid number of colors\");\n                          }\n                          this.setState({\n                            colors: Array.apply(null, Array(numColors)).map(\n                              () =>\n                                `#${rcv().toString(16)}${rcv().toString(\n                                  16\n                                )}${rcv().toString(16)}`\n                            )\n                          });\n                        }}\n                      />\n                    </Grid>\n                    <Grid container item direction=\"row\" justify=\"space-around\">\n                      <Button\n                        color=\"secondary\"\n                        onClick={() => this.setState({ computing: false })}\n                      >\n                        Stop\n                      </Button>\n                      <Button\n                        color=\"primary\"\n                        onClick={() => {\n                          if (this.state.computing) {\n                            this.setState({\n                              colors: randomColors(this.state.colors.length)\n                            });\n                          } else {\n                            this.setState({ computing: true });\n                            this.updateColors();\n                          }\n                        }}\n                      >\n                        {!this.state.computing && \"Start\"}\n                        {this.state.computing && \"Reset\"}\n                      </Button>\n                    </Grid>\n                    {this.state.computing && (\n                      <Grid\n                        container\n                        item\n                        direction=\"row\"\n                        justify=\"space-around\"\n                      >\n                        <Typography\n                          variant=\"h5\"\n                          align=\"left\"\n                          color=\"textSecondary\"\n                        >\n                          Contrast: {this.state.contrast}\n                        </Typography>\n                      </Grid>\n                    )}\n                  </Grid>\n                </Paper>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}